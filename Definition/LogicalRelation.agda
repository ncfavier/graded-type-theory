------------------------------------------------------------------------
-- The logical relation for reducibility
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation
  {a} {Mod : Set a}
  {ùïÑ : Modality Mod}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Untyped Mod as U hiding (K)
open import Definition.Untyped.Neutral Mod type-variant
open import Definition.Typed.Properties R
open import Definition.Typed R
open import Definition.Typed.Weakening R

open import Tools.Empty
open import Tools.Function
open import Tools.Level hiding (Level; _‚äî_)
open import Tools.Nat hiding (_<_; _‚â§_)
open import Tools.Product
import Tools.PropositionalEquality as PE
open import Tools.Relation
open import Tools.Unit

private
  variable
    p q : Mod
    ‚Ñì : Nat
    l : Universe-level
    Œì Œî : Con Term ‚Ñì
    t t‚Ä≤ u u‚Ä≤ : Term _
    œÅ : Wk _ _
    s : Strength

-- The different cases of the logical relation are spread out through out
-- this file. This is due to them having different dependencies.

-- We will refer to expressions that satisfies the logical relation as reducible.

-- Reducibility of Neutrals:

-- Neutral type
record _‚ä©ne_ {‚Ñì : Nat} (Œì : Con Term ‚Ñì) (A : Term ‚Ñì) : Set a where
  constructor ne
  field
    K   : Term ‚Ñì
    D   : Œì ‚ä¢ A :‚áí*: K
    neK : Neutral K
    K‚â°K : Œì ‚ä¢ K ‚âÖ K

-- Neutral type equality
record _‚ä©ne_‚â°_/_ (Œì : Con Term ‚Ñì) (A B : Term ‚Ñì) ([A] : Œì ‚ä©ne A) : Set a where
  constructor ne‚Çå
  open _‚ä©ne_ [A]
  field
    M   : Term ‚Ñì
    D‚Ä≤  : Œì ‚ä¢ B :‚áí*: M
    neM : Neutral M
    K‚â°M : Œì ‚ä¢ K ‚âÖ M

-- Neutral term in WHNF
record _‚ä©neNf_‚à∑_ (Œì : Con Term ‚Ñì) (k A : Term ‚Ñì) : Set a where
  inductive
  constructor neNf‚Çú
  field
    neK  : Neutral k
    ‚ä¢k   : Œì ‚ä¢ k ‚à∑ A
    k‚â°k  : Œì ‚ä¢ k ~ k ‚à∑ A

-- Neutral term
record _‚ä©ne_‚à∑_/_ (Œì : Con Term ‚Ñì) (t A : Term ‚Ñì) ([A] : Œì ‚ä©ne A) : Set a where
  inductive
  constructor ne‚Çú
  open _‚ä©ne_ [A]
  field
    k   : Term ‚Ñì
    d   : Œì ‚ä¢ t :‚áí*: k ‚à∑ K
    nf  : Œì ‚ä©neNf k ‚à∑ K

-- Neutral term equality in WHNF
record _‚ä©neNf_‚â°_‚à∑_ (Œì : Con Term ‚Ñì) (k m A : Term ‚Ñì) : Set a where
  inductive
  constructor neNf‚Çú‚Çå
  field
    neK  : Neutral k
    neM  : Neutral m
    k‚â°m  : Œì ‚ä¢ k ~ m ‚à∑ A

-- Neutral term equality
record _‚ä©ne_‚â°_‚à∑_/_ (Œì : Con Term ‚Ñì) (t u A : Term ‚Ñì) ([A] : Œì ‚ä©ne A) : Set a where
  constructor ne‚Çú‚Çå
  open _‚ä©ne_ [A]
  field
    k m : Term ‚Ñì
    d   : Œì ‚ä¢ t :‚áí*: k ‚à∑ K
    d‚Ä≤  : Œì ‚ä¢ u :‚áí*: m ‚à∑ K
    nf  : Œì ‚ä©neNf k ‚â° m ‚à∑ K

-- Reducibility of levels:

-- Level type
_‚ä©Level_ : (Œì : Con Term ‚Ñì) (A : Term ‚Ñì) ‚Üí Set a
Œì ‚ä©Level A = Œì ‚ä¢ A :‚áí*: Level

-- Level type equality
_‚ä©Level_‚â°_ : (Œì : Con Term ‚Ñì) (A B : Term ‚Ñì) ‚Üí Set a
Œì ‚ä©Level A ‚â° B = Œì ‚ä¢ B ‚áí* Level

mutual
  -- Level term
  record _‚ä©Level_‚à∑Level (Œì : Con Term ‚Ñì) (t : Term ‚Ñì) : Set a where
    inductive
    constructor Level‚Çú
    field
      m : Term ‚Ñì
      d : Œì ‚ä¢ t :‚áí*: m ‚à∑ Level
      m‚â°m : Œì ‚ä¢ m ‚âÖ m ‚à∑ Level
      prop : Level-prop Œì m

  -- WHNF property of level terms
  data Level-prop (Œì : Con Term ‚Ñì) : (l : Term ‚Ñì) ‚Üí Set a where
    zero·µò·µ£ : Level-prop Œì zero·µò
    suc·µò·µ£  : ‚àÄ {l} ‚Üí Œì ‚ä©Level l ‚à∑Level ‚Üí Level-prop Œì (suc·µò l)
    ne     : ‚àÄ {l} ‚Üí Œì ‚ä©neNf l ‚à∑ Level ‚Üí Level-prop Œì l

mutual
  -- Level term equality
  record _‚ä©Level_‚â°_‚à∑Level (Œì : Con Term ‚Ñì) (t u : Term ‚Ñì) : Set a where
    inductive
    constructor Level‚Çú‚Çå
    field
      k k‚Ä≤ : Term ‚Ñì
      d : Œì ‚ä¢ t :‚áí*: k ‚à∑ Level
      d‚Ä≤ : Œì ‚ä¢ u :‚áí*: k‚Ä≤ ‚à∑ Level
      k‚â°k‚Ä≤ : Œì ‚ä¢ k ‚âÖ k‚Ä≤ ‚à∑ Level
      prop : [Level]-prop Œì k k‚Ä≤

  -- WHNF property of level term equality
  data [Level]-prop (Œì : Con Term ‚Ñì) : (k k‚Ä≤ : Term ‚Ñì) ‚Üí Set a where
    zero·µò·µ£ : [Level]-prop Œì zero·µò zero·µò
    suc·µò·µ£  : ‚àÄ {k k‚Ä≤} ‚Üí Œì ‚ä©Level k ‚â° k‚Ä≤ ‚à∑Level ‚Üí [Level]-prop Œì (suc·µò k) (suc·µò k‚Ä≤)
    ne     : ‚àÄ {k k‚Ä≤} ‚Üí Œì ‚ä©neNf k ‚â° k‚Ä≤ ‚à∑ Level ‚Üí [Level]-prop Œì k k‚Ä≤

mutual
  _‚ä©_‚â§·µò_ : (Œì : Con Term ‚Ñì) ‚Üí ‚àÄ {l‚Ä≤} ([l‚Ä≤] : Œì ‚ä©Level l‚Ä≤ ‚à∑Level) (l : Universe-level) ‚Üí Set a
  Œì ‚ä© [l‚Ä≤] ‚â§·µò l = Œì ‚ä© [l‚Ä≤] ._‚ä©Level_‚à∑Level.prop ‚â§·µò‚Ä≤ l

  data _‚ä©_‚â§·µò‚Ä≤_ (Œì : Con Term ‚Ñì) : ‚àÄ {l‚Ä≤} (prop : Level-prop Œì l‚Ä≤) (l : Universe-level) ‚Üí Set a where
    ‚â§·µò-ne : ‚àÄ {l l‚Ä≤} ([l‚Ä≤] : Œì ‚ä©neNf l‚Ä≤ ‚à∑ Level) ‚Üí Œì ‚ä© ne [l‚Ä≤] ‚â§·µò‚Ä≤ l
    ‚â§·µò-zero·µò : ‚àÄ {l} ‚Üí Œì ‚ä© zero·µò·µ£ ‚â§·µò‚Ä≤ l
    ‚â§·µò-suc·µò : ‚àÄ {l l‚Ä≤} {[l‚Ä≤] : Œì ‚ä©Level l‚Ä≤ ‚à∑Level} ‚Üí Œì ‚ä© [l‚Ä≤] ‚â§·µò l ‚Üí Œì ‚ä© suc·µò·µ£ [l‚Ä≤] ‚â§·µò‚Ä≤ 1+ l

_‚ä©_<·µò_ : (Œì : Con Term ‚Ñì) ‚Üí ‚àÄ {l‚Ä≤} ([l‚Ä≤] : Œì ‚ä©Level l‚Ä≤ ‚à∑Level) (l : Universe-level) ‚Üí Set a
Œì ‚ä© [l‚Ä≤] <·µò l = Œì ‚ä© suc·µò·µ£ [l‚Ä≤] ‚â§·µò‚Ä≤ l

mutual
  _‚ä©_‚â°·µò_ : (Œì : Con Term ‚Ñì) ‚Üí ‚àÄ {l‚Ä≤} ([l‚Ä≤] : Œì ‚ä©Level l‚Ä≤ ‚à∑Level) (l : Universe-level) ‚Üí Set a
  Œì ‚ä© [l‚Ä≤] ‚â°·µò l = Œì ‚ä© [l‚Ä≤] ._‚ä©Level_‚à∑Level.prop ‚â°·µò‚Ä≤ l

  data _‚ä©_‚â°·µò‚Ä≤_ (Œì : Con Term ‚Ñì) : ‚àÄ {l‚Ä≤} (prop : Level-prop Œì l‚Ä≤) (l : Universe-level) ‚Üí Set a where
    ‚â°·µò-ne : ‚àÄ {l‚Ä≤} ([l‚Ä≤] : Œì ‚ä©neNf l‚Ä≤ ‚à∑ Level) ‚Üí Œì ‚ä© ne [l‚Ä≤] ‚â°·µò‚Ä≤ 0
    ‚â°·µò-zero·µò : Œì ‚ä© zero·µò·µ£ ‚â°·µò‚Ä≤ 0
    ‚â°·µò-suc·µò : ‚àÄ {l l‚Ä≤} {[l‚Ä≤] : Œì ‚ä©Level l‚Ä≤ ‚à∑Level} ‚Üí Œì ‚ä© [l‚Ä≤] ‚â°·µò l ‚Üí Œì ‚ä© suc·µò·µ£ [l‚Ä≤] ‚â°·µò‚Ä≤ 1+ l

-- mutual
--   reflect-level : Œì ‚ä©Level t ‚à∑Level ‚Üí Universe-level
--   reflect-level [t] = reflect-level-prop ([t] ._‚ä©Level_‚à∑Level.prop)

--   reflect-level-prop : Level-prop Œì t ‚Üí Universe-level
--   reflect-level-prop zero·µò·µ£ = 0
--   reflect-level-prop (suc·µò·µ£ x) = 1+ (reflect-level x)
--   reflect-level-prop (ne x) = 0

-- mutual
--   _‚ä©_<·µò_ : (Œì : Con Term ‚Ñì) ‚Üí ‚àÄ {l‚Ä≤} ([l‚Ä≤] : Œì ‚ä©Level l‚Ä≤ ‚à∑Level) (l : Universe-level) ‚Üí Set a
--   Œì ‚ä© [l‚Ä≤] <·µò l = Œì ‚ä© [l‚Ä≤] ._‚ä©Level_‚à∑Level.prop <·µò‚Ä≤ l

--   data _‚ä©_<·µò‚Ä≤_ (Œì : Con Term ‚Ñì) : ‚àÄ {l‚Ä≤} (prop : Level-prop Œì l‚Ä≤) (l : Universe-level) ‚Üí Set a where
--     zero·µò-<·µò : ‚àÄ {n} ‚Üí Œì ‚ä© zero·µò·µ£ <·µò‚Ä≤ lnat (1+ n)
--     suc·µò-<·µò
--       : ‚àÄ {n l} {[l] : Œì ‚ä©Level l ‚à∑Level}
--       ‚Üí Œì ‚ä© [l] <·µò lnat n
--       ‚Üí Œì ‚ä© suc·µò·µ£ [l] <·µò‚Ä≤ lnat (1+ n)
--     <·µò-lœâ : ‚àÄ {l‚Ä≤} {[l‚Ä≤] : Level-prop Œì l‚Ä≤} ‚Üí Œì ‚ä© [l‚Ä≤] <·µò‚Ä≤ lœâ

-- Reducibility of natural numbers:

-- Natural number type
_‚ä©‚Ñï_ : (Œì : Con Term ‚Ñì) (A : Term ‚Ñì) ‚Üí Set a
Œì ‚ä©‚Ñï A = Œì ‚ä¢ A :‚áí*: ‚Ñï

-- Natural number type equality
_‚ä©‚Ñï_‚â°_ : (Œì : Con Term ‚Ñì) (A B : Term ‚Ñì) ‚Üí Set a
Œì ‚ä©‚Ñï A ‚â° B = Œì ‚ä¢ B ‚áí* ‚Ñï

mutual
  -- Natural number term
  record _‚ä©‚Ñï_‚à∑‚Ñï (Œì : Con Term ‚Ñì) (t : Term ‚Ñì) : Set a where
    inductive
    constructor ‚Ñï‚Çú
    field
      n : Term ‚Ñì
      d : Œì ‚ä¢ t :‚áí*: n ‚à∑ ‚Ñï
      n‚â°n : Œì ‚ä¢ n ‚âÖ n ‚à∑ ‚Ñï
      prop : Natural-prop Œì n

  -- WHNF property of natural number terms
  data Natural-prop (Œì : Con Term ‚Ñì) : (n : Term ‚Ñì) ‚Üí Set a where
    suc·µ£  : ‚àÄ {n} ‚Üí Œì ‚ä©‚Ñï n ‚à∑‚Ñï ‚Üí Natural-prop Œì (suc n)
    zero·µ£ : Natural-prop Œì zero
    ne    : ‚àÄ {n} ‚Üí Œì ‚ä©neNf n ‚à∑ ‚Ñï ‚Üí Natural-prop Œì n

mutual
  -- Natural number term equality
  record _‚ä©‚Ñï_‚â°_‚à∑‚Ñï (Œì : Con Term ‚Ñì) (t u : Term ‚Ñì) : Set a where
    inductive
    constructor ‚Ñï‚Çú‚Çå
    field
      k k‚Ä≤ : Term ‚Ñì
      d : Œì ‚ä¢ t :‚áí*: k  ‚à∑ ‚Ñï
      d‚Ä≤ : Œì ‚ä¢ u :‚áí*: k‚Ä≤ ‚à∑ ‚Ñï
      k‚â°k‚Ä≤ : Œì ‚ä¢ k ‚âÖ k‚Ä≤ ‚à∑ ‚Ñï
      prop : [Natural]-prop Œì k k‚Ä≤

  -- WHNF property of Natural number term equality
  data [Natural]-prop (Œì : Con Term ‚Ñì) : (n n‚Ä≤ : Term ‚Ñì) ‚Üí Set a where
    suc·µ£  : ‚àÄ {n n‚Ä≤} ‚Üí Œì ‚ä©‚Ñï n ‚â° n‚Ä≤ ‚à∑‚Ñï ‚Üí [Natural]-prop Œì (suc n) (suc n‚Ä≤)
    zero·µ£ : [Natural]-prop Œì zero zero
    ne    : ‚àÄ {n n‚Ä≤} ‚Üí Œì ‚ä©neNf n ‚â° n‚Ä≤ ‚à∑ ‚Ñï ‚Üí [Natural]-prop Œì n n‚Ä≤

-- Reducibility of Empty

-- Empty type
_‚ä©Empty_ : (Œì : Con Term ‚Ñì) (A : Term ‚Ñì) ‚Üí Set a
Œì ‚ä©Empty A = Œì ‚ä¢ A :‚áí*: Empty

-- Empty type equality
_‚ä©Empty_‚â°_ : (Œì : Con Term ‚Ñì) (A B : Term ‚Ñì) ‚Üí Set a
Œì ‚ä©Empty A ‚â° B = Œì ‚ä¢ B ‚áí* Empty

-- WHNF property of absurd terms
data Empty-prop (Œì : Con Term ‚Ñì) : (n : Term ‚Ñì) ‚Üí Set a where
  ne    : ‚àÄ {n} ‚Üí Œì ‚ä©neNf n ‚à∑ Empty ‚Üí Empty-prop Œì n

-- Empty term
record _‚ä©Empty_‚à∑Empty (Œì : Con Term ‚Ñì) (t : Term ‚Ñì) : Set a where
  inductive
  constructor Empty‚Çú
  field
    n : Term ‚Ñì
    d : Œì ‚ä¢ t :‚áí*: n ‚à∑ Empty
    n‚â°n : Œì ‚ä¢ n ‚âÖ n ‚à∑ Empty
    prop : Empty-prop Œì n

data [Empty]-prop (Œì : Con Term ‚Ñì) : (n n‚Ä≤ : Term ‚Ñì) ‚Üí Set a where
  ne    : ‚àÄ {n n‚Ä≤} ‚Üí Œì ‚ä©neNf n ‚â° n‚Ä≤ ‚à∑ Empty ‚Üí [Empty]-prop Œì n n‚Ä≤

-- Empty term equality
record _‚ä©Empty_‚â°_‚à∑Empty (Œì : Con Term ‚Ñì) (t u : Term ‚Ñì) : Set a where
  inductive
  constructor Empty‚Çú‚Çå
  field
    k k‚Ä≤ : Term ‚Ñì
    d : Œì ‚ä¢ t :‚áí*: k  ‚à∑ Empty
    d‚Ä≤ : Œì ‚ä¢ u :‚áí*: k‚Ä≤ ‚à∑ Empty
    k‚â°k‚Ä≤ : Œì ‚ä¢ k ‚âÖ k‚Ä≤ ‚à∑ Empty
    prop : [Empty]-prop Œì k k‚Ä≤

-- Reducibility of Unit

-- Unit type
record _‚ä©Unit‚ü®_,_‚ü©_
  (Œì : Con Term ‚Ñì) (l : Universe-level) (s : Strength) (A : Term ‚Ñì) :
  Set a where
  no-eta-equality
  pattern
  constructor Unit‚Çú
  field
    l‚Ä≤ : Term ‚Ñì
    [l‚Ä≤] : Œì ‚ä©Level l‚Ä≤ ‚à∑Level
    l‚Ä≤<  : Œì ‚ä© [l‚Ä≤] ‚â§·µò l
    ‚áí*-Unit : Œì ‚ä¢ A :‚áí*: Unit s l‚Ä≤
    ok      : Unit-allowed s

-- Unit type equality
_‚ä©Unit‚ü®_,_‚ü©_‚â°_/_ :
  (Œì : Con Term ‚Ñì) ‚Üí (l : Universe-level) ‚Üí (s : Strength) ‚Üí (A B : Term ‚Ñì) ‚Üí Œì ‚ä©Unit‚ü® l , s ‚ü© A ‚Üí Set a
Œì ‚ä©Unit‚ü® l , s ‚ü© A ‚â° B / [A] = Œì ‚ä¢ B ‚áí* Unit s ([A] ._‚ä©Unit‚ü®_,_‚ü©_.l‚Ä≤)

data Unit-prop
  (Œì : Con Term ‚Ñì) (l : Universe-level) (s : Strength) (A : Term ‚Ñì) ([A] : Œì ‚ä©Unit‚ü® l , s ‚ü© A) :
  Term ‚Ñì ‚Üí Set a where
  star·µ£ : Unit-prop Œì l s A [A] (star s ([A] ._‚ä©Unit‚ü®_,_‚ü©_.l‚Ä≤))
  ne : ‚àÄ {n} ‚Üí Œì ‚ä©neNf n ‚à∑ Unit s ([A] ._‚ä©Unit‚ü®_,_‚ü©_.l‚Ä≤) ‚Üí Unit-prop Œì l s A [A] n

record _‚ä©Unit‚ü®_,_‚ü©_‚à∑_/_
  (Œì : Con Term ‚Ñì) (l : Universe-level) (s : Strength) (t : Term ‚Ñì) (A : Term ‚Ñì) ([A] : Œì ‚ä©Unit‚ü® l , s ‚ü© A) :
  Set a where
  inductive
  constructor Unit‚Çú
  open _‚ä©Unit‚ü®_,_‚ü©_ [A]
  field
    n : Term ‚Ñì
    d : Œì ‚ä¢ t :‚áí*: n ‚à∑ Unit s l‚Ä≤
    n‚â°n : Œì ‚ä¢ n ‚âÖ n ‚à∑ Unit s l‚Ä≤
    prop : Unit-prop Œì l s A [A] n

-- Unit term equality

data [Unit ∑]-prop
  (Œì : Con Term ‚Ñì) (l : Universe-level) (A : Term ‚Ñì) ([A] : Œì ‚ä©Unit‚ü® l , ùï® ‚ü© A) : (_ _ : Term ‚Ñì) ‚Üí Set a where
  star·µ£ : [Unit ∑]-prop Œì l A [A] (star ∑ ([A] ._‚ä©Unit‚ü®_,_‚ü©_.l‚Ä≤)) (star ∑ ([A] ._‚ä©Unit‚ü®_,_‚ü©_.l‚Ä≤))
  ne : ‚àÄ {n n‚Ä≤} ‚Üí Œì ‚ä©neNf n ‚â° n‚Ä≤ ‚à∑ Unit ùï® ([A] ._‚ä©Unit‚ü®_,_‚ü©_.l‚Ä≤) ‚Üí [Unit ∑]-prop Œì l A [A] n n‚Ä≤

data _‚ä©Unit‚ü®_,_‚ü©_‚â°_‚à∑_/_
  (Œì : Con Term ‚Ñì) (l : Universe-level) : (s : Strength) (t u : Term ‚Ñì) (A : Term ‚Ñì) ([A] : Œì ‚ä©Unit‚ü® l , s ‚ü© A) ‚Üí Set a where
  Unit‚Çú‚ÇåÀ¢ :
    ‚àÄ {A} {[A]} (open _‚ä©Unit‚ü®_,_‚ü©_ [A]) ‚Üí
    Œì ‚ä¢ t ‚à∑ Unit s l‚Ä≤ ‚Üí
    Œì ‚ä¢ u ‚à∑ Unit s l‚Ä≤ ‚Üí
    Unit-with-Œ∑ s ‚Üí
    Œì ‚ä©Unit‚ü® l , s ‚ü© t ‚â° u ‚à∑ A / [A]
  Unit‚Çú‚Çå ∑ :
    ‚àÄ {A} {[A]} (open _‚ä©Unit‚ü®_,_‚ü©_ [A]) ‚Üí
    (k k‚Ä≤ : Term ‚Ñì) ‚Üí
    Œì ‚ä¢ t :‚áí*: k  ‚à∑ Unit ∑ l‚Ä≤ ‚Üí
    Œì ‚ä¢ u :‚áí*: k‚Ä≤ ‚à∑ Unit ∑ l‚Ä≤ ‚Üí
    Œì ‚ä¢ k ‚âÖ k‚Ä≤ ‚à∑ Unit ∑ l‚Ä≤ ‚Üí
    [Unit ∑]-prop Œì l A [A] k k‚Ä≤ ‚Üí
    ¬¨ Unit ∑-Œ∑ ‚Üí
    Œì ‚ä©Unit‚ü® l , ùï® ‚ü© t ‚â° u ‚à∑ A / [A]

-- Logical relation
-- Exported interface
record LogRelKit : Set (lsuc a) where
  constructor Kit
  field
    _‚ä©U_ : Con Term ‚Ñì ‚Üí Term ‚Ñì ‚Üí Set a
    _‚ä©B‚ü®_‚ü©_ : (Œì : Con Term ‚Ñì) (W : BindingType) ‚Üí Term ‚Ñì ‚Üí Set a
    _‚ä©Id_ : Con Term ‚Ñì ‚Üí Term ‚Ñì ‚Üí Set a

    _‚ä©_ : (Œì : Con Term ‚Ñì) ‚Üí Term ‚Ñì ‚Üí Set a
    _‚ä©_‚â°_/_ : (Œì : Con Term ‚Ñì) (A B : Term ‚Ñì) ‚Üí Œì ‚ä© A ‚Üí Set a
    _‚ä©_‚à∑_/_ : (Œì : Con Term ‚Ñì) (t A : Term ‚Ñì) ‚Üí Œì ‚ä© A ‚Üí Set a
    _‚ä©_‚â°_‚à∑_/_ : (Œì : Con Term ‚Ñì) (t u A : Term ‚Ñì) ‚Üí Œì ‚ä© A ‚Üí Set a

module LogRel
  (l : Universe-level) (rec : ‚àÄ {l‚Ä≤} ‚Üí l‚Ä≤ <·µò l ‚Üí LogRelKit)
  where

  -- Reducibility of Universe:

  -- Universe type
  record _‚ä©‚ÇÅU_ (Œì : Con Term ‚Ñì) (A : Term ‚Ñì) : Set a where
    constructor U·µ£
    field
      l‚Ä≤  : Universe-level
      l‚Ä≤< : l‚Ä≤ <·µò l
      k   : Term ‚Ñì
      [k] : Œì ‚ä©Level k ‚à∑Level
      k‚â§  : Œì ‚ä© [k] ‚â°·µò l‚Ä≤
      ‚áí*U : Œì ‚ä¢ A :‚áí*: U k

  -- Universe type equality
  _‚ä©‚ÇÅU‚â°_/_ : Con Term ‚Ñì ‚Üí Term ‚Ñì ‚Üí Term ‚Ñì ‚Üí Set a
  Œì ‚ä©‚ÇÅU‚â° B / l‚Ä≤ = Œì ‚ä¢ B :‚áí*: U l‚Ä≤


  -- Universe term
  record _‚ä©‚ÇÅU_‚à∑U/_
           {T} (Œì : Con Term ‚Ñì) (t : Term ‚Ñì) ([T] : Œì ‚ä©‚ÇÅU T) :
           Set a where
    constructor U‚Çú
    open _‚ä©‚ÇÅU_ [T]
    open LogRelKit (rec l‚Ä≤<)
    field
      A     : Term ‚Ñì
      d     : Œì ‚ä¢ t :‚áí*: A ‚à∑ U k
      typeA : Type A
      A‚â°A   : Œì ‚ä¢ A ‚âÖ A ‚à∑ U k
      [t]   : Œì ‚ä© t

  -- Universe term equality
  record _‚ä©‚ÇÅU_‚â°_‚à∑U/_
           {T} (Œì : Con Term ‚Ñì) (t u : Term ‚Ñì) ([T] : Œì ‚ä©‚ÇÅU T) :
           Set a where
    constructor U‚Çú‚Çå
    open _‚ä©‚ÇÅU_ [T]
    open LogRelKit (rec l‚Ä≤<)
    field
      A B   : Term ‚Ñì
      d     : Œì ‚ä¢ t :‚áí*: A ‚à∑ U k
      d‚Ä≤    : Œì ‚ä¢ u :‚áí*: B ‚à∑ U k
      typeA : Type A
      typeB : Type B
      A‚â°B   : Œì ‚ä¢ A ‚âÖ B ‚à∑ U k
      [t]   : Œì ‚ä© t
      [u]   : Œì ‚ä© u
      [t‚â°u] : Œì ‚ä© t ‚â° u / [t]



  mutual

    -- Reducibility of Binding types (Œ†, Œ£):

    -- B-type
    record _‚ä©‚ÇóB‚ü®_‚ü©_ (Œì : Con Term ‚Ñì) (W : BindingType) (A : Term ‚Ñì) : Set a where
      inductive
      constructor B·µ£
      eta-equality
      field
        F : Term ‚Ñì
        G : Term (1+ ‚Ñì)
        D : Œì ‚ä¢ A :‚áí*: ‚ü¶ W ‚üß F ‚ñπ G
        ‚ä¢F : Œì ‚ä¢ F
        ‚ä¢G : Œì ‚àô F ‚ä¢ G
        A‚â°A : Œì ‚ä¢ ‚ü¶ W ‚üß F ‚ñπ G ‚âÖ ‚ü¶ W ‚üß F ‚ñπ G
        [F] : ‚àÄ {m} {œÅ : Wk m ‚Ñì} {Œî : Con Term m} ‚Üí œÅ ‚à∑ Œî ‚äá Œì ‚Üí ‚ä¢ Œî ‚Üí Œî ‚ä©‚Çó U.wk œÅ F
        [G] : ‚àÄ {m} {œÅ : Wk m ‚Ñì} {Œî : Con Term m} {a : Term m}
            ‚Üí ([œÅ] : œÅ ‚à∑ Œî ‚äá Œì) (‚ä¢Œî : ‚ä¢ Œî)
            ‚Üí Œî ‚ä©‚Çó a ‚à∑ U.wk œÅ F / [F] [œÅ] ‚ä¢Œî
            ‚Üí Œî ‚ä©‚Çó U.wk (lift œÅ) G [ a ]‚ÇÄ
        G-ext : ‚àÄ {m} {œÅ : Wk m ‚Ñì} {Œî : Con Term m} {a b}
              ‚Üí ([œÅ] : œÅ ‚à∑ Œî ‚äá Œì) (‚ä¢Œî : ‚ä¢ Œî)
              ‚Üí ([a] : Œî ‚ä©‚Çó a ‚à∑ U.wk œÅ F / [F] [œÅ] ‚ä¢Œî)
              ‚Üí ([b] : Œî ‚ä©‚Çó b ‚à∑ U.wk œÅ F / [F] [œÅ] ‚ä¢Œî)
              ‚Üí Œî ‚ä©‚Çó a ‚â° b ‚à∑ U.wk œÅ F / [F] [œÅ] ‚ä¢Œî
              ‚Üí Œî ‚ä©‚Çó U.wk (lift œÅ) G [ a ]‚ÇÄ ‚â° U.wk (lift œÅ) G [ b ]‚ÇÄ / [G] [œÅ] ‚ä¢Œî [a]
        ok : BindingType-allowed W

    -- B-type equality
    record _‚ä©‚ÇóB‚ü®_‚ü©_‚â°_/_ (Œì : Con Term ‚Ñì) (W : BindingType) (A B : Term ‚Ñì) ([A] : Œì ‚ä©‚ÇóB‚ü® W ‚ü© A) : Set a where
      inductive
      constructor B‚Çå
      eta-equality
      open _‚ä©‚ÇóB‚ü®_‚ü©_ [A]
      field
        F‚Ä≤     : Term ‚Ñì
        G‚Ä≤     : Term (1+ ‚Ñì)
        D‚Ä≤     : Œì ‚ä¢ B :‚áí*: ‚ü¶ W ‚üß F‚Ä≤ ‚ñπ G‚Ä≤
        A‚â°B    : Œì ‚ä¢ ‚ü¶ W ‚üß F ‚ñπ G ‚âÖ ‚ü¶ W ‚üß F‚Ä≤ ‚ñπ G‚Ä≤
        [F‚â°F‚Ä≤] : {m : Nat} {œÅ : Wk m ‚Ñì} {Œî : Con Term m}
               ‚Üí ([œÅ] : œÅ ‚à∑ Œî ‚äá Œì) (‚ä¢Œî : ‚ä¢ Œî)
               ‚Üí Œî ‚ä©‚Çó U.wk œÅ F ‚â° U.wk œÅ F‚Ä≤ / [F] [œÅ] ‚ä¢Œî
        [G‚â°G‚Ä≤] : ‚àÄ {m} {œÅ : Wk m ‚Ñì} {Œî : Con Term m} {a}
               ‚Üí ([œÅ] : œÅ ‚à∑ Œî ‚äá Œì) (‚ä¢Œî : ‚ä¢ Œî)
               ‚Üí ([a] : Œî ‚ä©‚Çó a ‚à∑ U.wk œÅ F / [F] [œÅ] ‚ä¢Œî)
               ‚Üí Œî ‚ä©‚Çó U.wk (lift œÅ) G [ a ]‚ÇÄ ‚â° U.wk (lift œÅ) G‚Ä≤ [ a ]‚ÇÄ / [G] [œÅ] ‚ä¢Œî [a]

    -- Term reducibility of Œ†-type
    _‚ä©‚ÇóŒ†_‚à∑_/_ : {‚Ñì : Nat} {p q : Mod} (Œì : Con Term ‚Ñì) (t A : Term ‚Ñì) ([A] : Œì ‚ä©‚ÇóB‚ü® BŒ† p q ‚ü© A) ‚Üí Set a
    _‚ä©‚ÇóŒ†_‚à∑_/_ {‚Ñì} {p} {q} Œì t A (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _) =
      ‚àÉ Œª f ‚Üí Œì ‚ä¢ t :‚áí*: f ‚à∑ Œ† p , q ‚ñ∑ F ‚ñπ G
            √ó Function f
            √ó Œì ‚ä¢ f ‚âÖ f ‚à∑ Œ† p , q ‚ñ∑ F ‚ñπ G
            √ó (‚àÄ {m} {œÅ : Wk m ‚Ñì} {Œî : Con Term m} {a b}
              ([œÅ] : œÅ ‚à∑ Œî ‚äá Œì) (‚ä¢Œî : ‚ä¢ Œî)
              ([a] : Œî ‚ä©‚Çó a ‚à∑ U.wk œÅ F / [F] [œÅ] ‚ä¢Œî)
              ([b] : Œî ‚ä©‚Çó b ‚à∑ U.wk œÅ F / [F] [œÅ] ‚ä¢Œî)
              ([a‚â°b] : Œî ‚ä©‚Çó a ‚â° b ‚à∑ U.wk œÅ F / [F] [œÅ] ‚ä¢Œî)
              ‚Üí Œî ‚ä©‚Çó U.wk œÅ f ‚àò‚ü® p ‚ü© a ‚â° U.wk œÅ f ‚àò‚ü® p ‚ü© b ‚à∑ U.wk (lift œÅ) G [ a ]‚ÇÄ / [G] [œÅ] ‚ä¢Œî [a])
            √ó (‚àÄ {m} {œÅ : Wk m ‚Ñì} {Œî : Con Term m} {a} ‚Üí ([œÅ] : œÅ ‚à∑ Œî ‚äá Œì) (‚ä¢Œî : ‚ä¢ Œî)
              ‚Üí ([a] : Œî ‚ä©‚Çó a ‚à∑ U.wk œÅ F / [F] [œÅ] ‚ä¢Œî)
              ‚Üí Œî ‚ä©‚Çó U.wk œÅ f ‚àò‚ü® p ‚ü© a ‚à∑ U.wk (lift œÅ) G [ a ]‚ÇÄ / [G] [œÅ] ‚ä¢Œî [a])
              {- NOTE(WN): Last 2 fields could be refactored to a single forall.
                           But touching this definition is painful, so only do it
                           if you have to change it anyway. -}
    -- Issue: Agda complains about record use not being strictly positive.
    --        Therefore we have to use √ó

    -- Term equality of Œ†-type
    _‚ä©‚ÇóŒ†_‚â°_‚à∑_/_ : {‚Ñì : Nat} {p q : Mod} (Œì : Con Term ‚Ñì) (t u A : Term ‚Ñì) ([A] : Œì ‚ä©‚ÇóB‚ü® BŒ† p q ‚ü© A) ‚Üí Set a
    _‚ä©‚ÇóŒ†_‚â°_‚à∑_/_
      {‚Ñì} {p} {q} Œì t u A [A]@(B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _) =
      ‚àÉ‚ÇÇ Œª f g ‚Üí Œì ‚ä¢ t :‚áí*: f ‚à∑ Œ† p , q ‚ñ∑ F ‚ñπ G
               √ó Œì ‚ä¢ u :‚áí*: g ‚à∑ Œ† p , q ‚ñ∑ F ‚ñπ G
               √ó Function f
               √ó Function g
               √ó Œì ‚ä¢ f ‚âÖ g ‚à∑ Œ† p , q ‚ñ∑ F ‚ñπ G
               √ó Œì ‚ä©‚ÇóŒ† t ‚à∑ A / [A]
               √ó Œì ‚ä©‚ÇóŒ† u ‚à∑ A / [A]
               √ó (‚àÄ {m} {œÅ : Wk m ‚Ñì} {Œî : Con Term m} {a} ([œÅ] : œÅ ‚à∑ Œî ‚äá Œì) (‚ä¢Œî : ‚ä¢ Œî)
                 ([a] : Œî ‚ä©‚Çó a ‚à∑ U.wk œÅ F / [F] [œÅ] ‚ä¢Œî)
                 ‚Üí Œî ‚ä©‚Çó U.wk œÅ f ‚àò‚ü® p ‚ü© a ‚â° U.wk œÅ g ‚àò‚ü® p ‚ü© a ‚à∑ U.wk (lift œÅ) G [ a ]‚ÇÄ / [G] [œÅ] ‚ä¢Œî [a])
    -- Issue: Same as above.


    -- Term reducibility of Œ£-type
    _‚ä©‚ÇóŒ£_‚à∑_/_ :
      {p q : Mod} {m : Strength} (Œì : Con Term ‚Ñì) (t A : Term ‚Ñì)
      ([A] : Œì ‚ä©‚ÇóB‚ü® BŒ£ m p q ‚ü© A) ‚Üí Set a
    _‚ä©‚ÇóŒ£_‚à∑_/_
      {p = p} {q = q} {m = m} Œì t A
      [A]@(B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _) =
      ‚àÉ Œª u ‚Üí Œì ‚ä¢ t :‚áí*: u ‚à∑ Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G
            √ó Œì ‚ä¢ u ‚âÖ u ‚à∑ Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G
            √ó Œ£ (Product u) Œª pProd
            ‚Üí Œ£-prop m u Œì [A] pProd

    Œ£-prop : ‚àÄ {A p q} (m : Strength) (t : Term ‚Ñì) ‚Üí (Œì : Con Term ‚Ñì)
           ‚Üí ([A] : Œì ‚ä©‚ÇóB‚ü® BŒ£ m p q ‚ü© A) ‚Üí (Product t) ‚Üí Set a
    Œ£-prop {p = p} ùï§ t Œì (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _) _ =
      Œ£ (Œì ‚ä©‚Çó fst p t ‚à∑ U.wk id F / [F] id (wf ‚ä¢F)) Œª [fst] ‚Üí
      Œì ‚ä©‚Çó snd p t ‚à∑ U.wk (lift id) G [ fst p t ]‚ÇÄ /
        [G] id (wf ‚ä¢F) [fst]
    Œ£-prop
      {p = p} ùï® t Œì (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _)
      (prod‚Çô {p = p‚Ä≤} {t = p‚ÇÅ} {u = p‚ÇÇ} {m = m}) =
           p PE.‚â° p‚Ä≤ √ó
           Œ£ (Œì ‚ä©‚Çó p‚ÇÅ ‚à∑ U.wk id F / [F] id (wf ‚ä¢F)) Œª [p‚ÇÅ]
           ‚Üí Œì ‚ä©‚Çó p‚ÇÇ ‚à∑ U.wk (lift id) G [ p‚ÇÅ ]‚ÇÄ / [G] id (wf ‚ä¢F) [p‚ÇÅ]
           √ó m PE.‚â° ùï®
    Œ£-prop
      {p = p} {q = q}
      ùï® t Œì (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _) (ne x) =
      Œì ‚ä¢ t ~ t ‚à∑ Œ£ ∑ p , q ‚ñ∑ F ‚ñπ G

    -- Term equality of Œ£-type
    _‚ä©‚ÇóŒ£_‚â°_‚à∑_/_ :
      {p q : Mod} {m : Strength} (Œì : Con Term ‚Ñì) (t u A : Term ‚Ñì)
      ([A] : Œì ‚ä©‚ÇóB‚ü® BŒ£ m p q ‚ü© A) ‚Üí Set a
    _‚ä©‚ÇóŒ£_‚â°_‚à∑_/_
      {p = p} {q = q} {m} Œì t u A
      [A]@(B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _) =
      ‚àÉ‚ÇÇ Œª t‚Ä≤ u‚Ä≤ ‚Üí Œì ‚ä¢ t :‚áí*: t‚Ä≤ ‚à∑ Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G
                 √ó Œì ‚ä¢ u :‚áí*: u‚Ä≤ ‚à∑ Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G
                 √ó Œì ‚ä¢ t‚Ä≤ ‚âÖ u‚Ä≤ ‚à∑ Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G
                 √ó Œì ‚ä©‚ÇóŒ£ t ‚à∑ A / [A]
                 √ó Œì ‚ä©‚ÇóŒ£ u ‚à∑ A / [A]
                 √ó Œ£ (Product t‚Ä≤) Œª pProd
                 ‚Üí Œ£ (Product u‚Ä≤) Œª rProd
                 ‚Üí [Œ£]-prop m t‚Ä≤ u‚Ä≤ Œì [A] pProd rProd

    [Œ£]-prop :
      ‚àÄ {A p q} (m : Strength) (t r : Term ‚Ñì) (Œì : Con Term ‚Ñì)
      ([A] : Œì ‚ä©‚ÇóB‚ü® BŒ£ m p q ‚ü© A) ‚Üí Product t ‚Üí Product r ‚Üí Set a
    [Œ£]-prop {p = p} ùï§ t r Œì (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _) _ _ =
      Œ£ (Œì ‚ä©‚Çó fst p t ‚à∑ U.wk id F / [F] id (wf ‚ä¢F)) Œª [fstp]
      ‚Üí Œì ‚ä©‚Çó fst p r ‚à∑ U.wk id F / [F] id (wf ‚ä¢F)
      √ó Œì ‚ä©‚Çó fst p t ‚â° fst p r ‚à∑ U.wk id F / [F] id (wf ‚ä¢F)
      √ó Œì ‚ä©‚Çó snd p t ‚â° snd p r ‚à∑ U.wk (lift id) G [ fst p t ]‚ÇÄ
        / [G] id (wf ‚ä¢F) [fstp]
    [Œ£]-prop
      {p = p} ùï® t r Œì (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _)
      (prod‚Çô {p = p‚Ä≤} {t = p‚ÇÅ} {u = p‚ÇÇ})
      (prod‚Çô {p = p‚Ä≥} {t = r‚ÇÅ} {u = r‚ÇÇ}) =
             p PE.‚â° p‚Ä≤ √ó p PE.‚â° p‚Ä≥ √ó
             Œ£ (Œì ‚ä©‚Çó p‚ÇÅ ‚à∑ U.wk id F / [F] id (wf ‚ä¢F)) Œª [p‚ÇÅ] ‚Üí
             Œ£ (Œì ‚ä©‚Çó r‚ÇÅ ‚à∑ U.wk id F / [F] id (wf ‚ä¢F)) Œª [r‚ÇÅ]
             ‚Üí (Œì ‚ä©‚Çó p‚ÇÇ ‚à∑ U.wk (lift id) G [ p‚ÇÅ ]‚ÇÄ / [G] id (wf ‚ä¢F) [p‚ÇÅ])
             √ó (Œì ‚ä©‚Çó r‚ÇÇ ‚à∑ U.wk (lift id) G [ r‚ÇÅ ]‚ÇÄ / [G] id (wf ‚ä¢F) [r‚ÇÅ])
             √ó (Œì ‚ä©‚Çó p‚ÇÅ ‚â° r‚ÇÅ ‚à∑ U.wk id F / [F] id (wf ‚ä¢F))
             √ó (Œì ‚ä©‚Çó p‚ÇÇ ‚â° r‚ÇÇ ‚à∑ U.wk (lift id) G [ p‚ÇÅ ]‚ÇÄ / [G] id (wf ‚ä¢F) [p‚ÇÅ])
    [Œ£]-prop
      ùï® t r Œì (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _)
      (prod‚Çô {t = p‚ÇÅ} {u = p‚ÇÇ}) (ne y) =
      Lift a ‚ä•
    [Œ£]-prop
      ùï® t r Œì (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext ok)
      (ne x) (prod‚Çô {t = r‚ÇÅ} {u = r‚ÇÇ}) =
      Lift a ‚ä•
    [Œ£]-prop
      {p = p} {q = q} ùï® t r Œì
      (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _) (ne x) (ne y) =
        Œì ‚ä¢ t ~ r ‚à∑ Œ£ ∑ p , q ‚ñ∑ F ‚ñπ G

    -- Reducibility for identity types.

    -- Well-formed identity types.
    record _‚ä©‚ÇóId_ (Œì : Con Term ‚Ñì) (A : Term ‚Ñì) : Set a where
      inductive
      constructor Id·µ£
      eta-equality
      field
        Ty lhs rhs : Term ‚Ñì
        ‚áí*Id       : Œì ‚ä¢ A :‚áí*: Id Ty lhs rhs
        ‚ä©Ty        : Œì ‚ä©‚Çó Ty
        ‚ä©lhs       : Œì ‚ä©‚Çó lhs ‚à∑ Ty / ‚ä©Ty
        ‚ä©rhs       : Œì ‚ä©‚Çó rhs ‚à∑ Ty / ‚ä©Ty

    -- Well-formed identity type equality.
    record _‚ä©‚ÇóId_‚â°_/_
      (Œì : Con Term ‚Ñì) (A B : Term ‚Ñì) (‚ä©A : Œì ‚ä©‚ÇóId A) : Set a where
      inductive
      constructor Id‚Çå
      eta-equality

      open _‚ä©‚ÇóId_ ‚ä©A

      field
        Ty‚Ä≤ lhs‚Ä≤ rhs‚Ä≤ : Term ‚Ñì
        ‚áí*Id‚Ä≤         : Œì ‚ä¢ B :‚áí*: Id Ty‚Ä≤ lhs‚Ä≤ rhs‚Ä≤
        Ty‚â°Ty‚Ä≤        : Œì ‚ä©‚Çó Ty ‚â° Ty‚Ä≤ / ‚ä©Ty
        lhs‚â°lhs‚Ä≤      : Œì ‚ä©‚Çó lhs ‚â° lhs‚Ä≤ ‚à∑ Ty / ‚ä©Ty
        rhs‚â°rhs‚Ä≤      : Œì ‚ä©‚Çó rhs ‚â° rhs‚Ä≤ ‚à∑ Ty / ‚ä©Ty

        -- The fact that the types of the following two fields are
        -- inhabited follows from symmetry, transitivity and the
        -- previous two fields, see
        -- Definition.LogicalRelation.Properties.Transitivity.Id‚Çå‚Ä≤.
        -- The fields are used in
        -- Definition.LogicalRelation.Properties.Conversion, which is
        -- imported from
        -- Definition.LogicalRelation.Properties.Transitivity.
        lhs‚â°rhs‚Üílhs‚Ä≤‚â°rhs‚Ä≤ : Œì ‚ä©‚Çó lhs  ‚â° rhs  ‚à∑ Ty / ‚ä©Ty ‚Üí
                            Œì ‚ä©‚Çó lhs‚Ä≤ ‚â° rhs‚Ä≤ ‚à∑ Ty / ‚ä©Ty
        lhs‚Ä≤‚â°rhs‚Ä≤‚Üílhs‚â°rhs : Œì ‚ä©‚Çó lhs‚Ä≤ ‚â° rhs‚Ä≤ ‚à∑ Ty / ‚ä©Ty ‚Üí
                            Œì ‚ä©‚Çó lhs  ‚â° rhs  ‚à∑ Ty / ‚ä©Ty

    -- Well-formed identity terms.
    _‚ä©‚ÇóId_‚à∑_/_ : (Œì : Con Term ‚Ñì) (t A : Term ‚Ñì) ‚Üí Œì ‚ä©‚ÇóId A ‚Üí Set a
    Œì ‚ä©‚ÇóId t ‚à∑ A / ‚ä©A =
      ‚àÉ Œª u ‚Üí
      Œì ‚ä¢ t :‚áí*: u ‚à∑ Id Ty lhs rhs √ó
      ‚àÉ Œª (u-id : Identity u) ‚Üí
      case u-id of Œª where
        (ne _) ‚Üí Œì ‚ä¢ u ~ u ‚à∑ Id Ty lhs rhs
        rfl‚Çô   ‚Üí Œì ‚ä©‚Çó lhs ‚â° rhs ‚à∑ Ty / ‚ä©Ty
      where
      open _‚ä©‚ÇóId_ ‚ä©A

    -- Well-formed identity term equality.
    _‚ä©‚ÇóId_‚â°_‚à∑_/_ : (Œì : Con Term ‚Ñì) (t u A : Term ‚Ñì) ‚Üí Œì ‚ä©‚ÇóId A ‚Üí Set a
    Œì ‚ä©‚ÇóId t ‚â° u ‚à∑ A / ‚ä©A =
      ‚àÉ‚ÇÇ Œª t‚Ä≤ u‚Ä≤ ‚Üí
      Œì ‚ä¢ t :‚áí*: t‚Ä≤ ‚à∑ Id Ty lhs rhs √ó
      Œì ‚ä¢ u :‚áí*: u‚Ä≤ ‚à∑ Id Ty lhs rhs √ó
      ‚àÉ Œª (t‚Ä≤-id : Identity t‚Ä≤) ‚Üí
      ‚àÉ Œª (u‚Ä≤-id : Identity u‚Ä≤) ‚Üí
      Identity-rec t‚Ä≤-id
        (Identity-rec u‚Ä≤-id
           (Œì ‚ä©‚Çó lhs ‚â° rhs ‚à∑ Ty / ‚ä©Ty)
           (Lift _ ‚ä•))
        (Identity-rec u‚Ä≤-id
           (Lift _ ‚ä•)
           (Œì ‚ä¢ t‚Ä≤ ~ u‚Ä≤ ‚à∑ Id Ty lhs rhs))
      where
      open _‚ä©‚ÇóId_ ‚ä©A

    -- Logical relation definition
    data _‚ä©‚Çó_ (Œì : Con Term ‚Ñì) : Term ‚Ñì ‚Üí Set a where
      Level·µ£ : ‚àÄ {A} ‚Üí Œì ‚ä©Level A ‚Üí Œì ‚ä©‚Çó A
      U·µ£  : ‚àÄ {A} ‚Üí Œì ‚ä©‚ÇÅU A ‚Üí Œì ‚ä©‚Çó A
      ‚Ñï·µ£  : ‚àÄ {A} ‚Üí Œì ‚ä©‚Ñï A ‚Üí Œì ‚ä©‚Çó A
      Empty·µ£ : ‚àÄ {A} ‚Üí Œì ‚ä©Empty A ‚Üí Œì ‚ä©‚Çó A
      Unit·µ£ : ‚àÄ {A} {s : Strength} ‚Üí Œì ‚ä©Unit‚ü® l , s ‚ü© A ‚Üí Œì ‚ä©‚Çó A
      ne  : ‚àÄ {A} ‚Üí Œì ‚ä©ne A ‚Üí Œì ‚ä©‚Çó A
      B·µ£  : ‚àÄ {A} W ‚Üí Œì ‚ä©‚ÇóB‚ü® W ‚ü© A ‚Üí Œì ‚ä©‚Çó A
      Id·µ£ : ‚àÄ {A} ‚Üí Œì ‚ä©‚ÇóId A ‚Üí Œì ‚ä©‚Çó A
      emb : ‚àÄ {A l‚Ä≤} (l< : l‚Ä≤ <·µò l) (let open LogRelKit (rec l<))
            ([A] : Œì ‚ä© A) ‚Üí Œì ‚ä©‚Çó A

    _‚ä©‚Çó_‚â°_/_ : (Œì : Con Term ‚Ñì) (A B : Term ‚Ñì) ‚Üí Œì ‚ä©‚Çó A ‚Üí Set a
    Œì ‚ä©‚Çó A ‚â° B / Level·µ£ D = Œì ‚ä©Level A ‚â° B
    Œì ‚ä©‚Çó A ‚â° B / U·µ£ D = Œì ‚ä©‚ÇÅU‚â° B / D ._‚ä©‚ÇÅU_.k
    Œì ‚ä©‚Çó A ‚â° B / ‚Ñï·µ£ D = Œì ‚ä©‚Ñï A ‚â° B
    Œì ‚ä©‚Çó A ‚â° B / Empty·µ£ D = Œì ‚ä©Empty A ‚â° B
    Œì ‚ä©‚Çó A ‚â° B / Unit·µ£ {s = s} D = Œì ‚ä©Unit‚ü® l , s ‚ü© A ‚â° B / D
    Œì ‚ä©‚Çó A ‚â° B / ne neA = Œì ‚ä©ne A ‚â° B / neA
    Œì ‚ä©‚Çó A ‚â° B / B·µ£ W BA = Œì ‚ä©‚ÇóB‚ü® W ‚ü© A ‚â° B / BA
    Œì ‚ä©‚Çó A ‚â° B / Id·µ£ ‚ä©A = Œì ‚ä©‚ÇóId A ‚â° B / ‚ä©A
    Œì ‚ä©‚Çó A ‚â° B / emb l< [A] = Œì ‚ä© A ‚â° B / [A]
      where open LogRelKit (rec l<)

    _‚ä©‚Çó_‚à∑_/_ : (Œì : Con Term ‚Ñì) (t A : Term ‚Ñì) ‚Üí Œì ‚ä©‚Çó A ‚Üí Set a
    Œì ‚ä©‚Çó t ‚à∑ A / Level·µ£ D = Œì ‚ä©Level t ‚à∑Level
    Œì ‚ä©‚Çó t ‚à∑ A / U·µ£ p = Œì ‚ä©‚ÇÅU t ‚à∑U/ p
    Œì ‚ä©‚Çó t ‚à∑ A / ‚Ñï·µ£ D = Œì ‚ä©‚Ñï t ‚à∑‚Ñï
    Œì ‚ä©‚Çó t ‚à∑ A / Empty·µ£ D = Œì ‚ä©Empty t ‚à∑Empty
    Œì ‚ä©‚Çó t ‚à∑ A / Unit·µ£ {s = s} D = Œì ‚ä©Unit‚ü® l , s ‚ü© t ‚à∑ A / D
    Œì ‚ä©‚Çó t ‚à∑ A / ne neA = Œì ‚ä©ne t ‚à∑ A / neA
    Œì ‚ä©‚Çó t ‚à∑ A / B·µ£ BŒ†! Œ†A  = Œì ‚ä©‚ÇóŒ† t ‚à∑ A / Œ†A
    Œì ‚ä©‚Çó t ‚à∑ A / B·µ£ BŒ£! Œ£A  = Œì ‚ä©‚ÇóŒ£ t ‚à∑ A / Œ£A
    Œì ‚ä©‚Çó t ‚à∑ A / Id·µ£ ‚ä©A = Œì ‚ä©‚ÇóId t ‚à∑ A / ‚ä©A
    Œì ‚ä©‚Çó t ‚à∑ A / emb l< [A] = Œì ‚ä© t ‚à∑ A / [A]
      where open LogRelKit (rec l<)

    _‚ä©‚Çó_‚â°_‚à∑_/_ : (Œì : Con Term ‚Ñì) (t u A : Term ‚Ñì) ‚Üí Œì ‚ä©‚Çó A ‚Üí Set a
    Œì ‚ä©‚Çó t ‚â° u ‚à∑ A / Level·µ£ D = Œì ‚ä©Level t ‚â° u ‚à∑Level
    Œì ‚ä©‚Çó t ‚â° u ‚à∑ A / U·µ£ p = Œì ‚ä©‚ÇÅU t ‚â° u ‚à∑U/ p
    Œì ‚ä©‚Çó t ‚â° u ‚à∑ A / ‚Ñï·µ£ D = Œì ‚ä©‚Ñï t ‚â° u ‚à∑‚Ñï
    Œì ‚ä©‚Çó t ‚â° u ‚à∑ A / Empty·µ£ D = Œì ‚ä©Empty t ‚â° u ‚à∑Empty
    Œì ‚ä©‚Çó t ‚â° u ‚à∑ A / Unit·µ£ {s = s} D = Œì ‚ä©Unit‚ü® l , s ‚ü© t ‚â° u ‚à∑ A / D
    Œì ‚ä©‚Çó t ‚â° u ‚à∑ A / ne neA = Œì ‚ä©ne t ‚â° u ‚à∑ A / neA
    Œì ‚ä©‚Çó t ‚â° u ‚à∑ A / B·µ£ BŒ†! Œ†A = Œì ‚ä©‚ÇóŒ† t ‚â° u ‚à∑ A / Œ†A
    Œì ‚ä©‚Çó t ‚â° u ‚à∑ A / B·µ£ BŒ£! Œ£A  = Œì ‚ä©‚ÇóŒ£ t ‚â° u ‚à∑ A / Œ£A
    Œì ‚ä©‚Çó t ‚â° u ‚à∑ A / Id·µ£ ‚ä©A = Œì ‚ä©‚ÇóId t ‚â° u ‚à∑ A / ‚ä©A
    Œì ‚ä©‚Çó t ‚â° u ‚à∑ A / emb l< [A] = Œì ‚ä© t ‚â° u ‚à∑ A / [A]
      where open LogRelKit (rec l<)

    kit : LogRelKit
    kit = Kit _‚ä©‚ÇÅU_ _‚ä©‚ÇóB‚ü®_‚ü©_ _‚ä©‚ÇóId_
              _‚ä©‚Çó_ _‚ä©‚Çó_‚â°_/_ _‚ä©‚Çó_‚à∑_/_ _‚ä©‚Çó_‚â°_‚à∑_/_

open LogRel public
  using
    (Level·µ£; U·µ£; ‚Ñï·µ£; Empty·µ£; Unit·µ£; ne; B·µ£; B‚Çå; Id·µ£; Id‚Çå; emb; U‚Çú; U‚Çú‚Çå;
     module _‚ä©‚ÇÅU_; module _‚ä©‚ÇÅU_‚à∑U/_; module _‚ä©‚ÇÅU_‚â°_‚à∑U/_;
     module _‚ä©‚ÇóB‚ü®_‚ü©_; module _‚ä©‚ÇóB‚ü®_‚ü©_‚â°_/_;
     module _‚ä©‚ÇóId_; module _‚ä©‚ÇóId_‚â°_/_)

-- Patterns for the non-records of Œ†
pattern Œ†‚Çú f d funcF f‚â°f [f] [f]‚ÇÅ = f , d , funcF , f‚â°f , [f] , [f]‚ÇÅ
pattern Œ†‚Çú‚Çå f g d d‚Ä≤ funcF funcG f‚â°g [f] [g] [f‚â°g] = f , g , d , d‚Ä≤ , funcF , funcG , f‚â°g , [f] , [g] , [f‚â°g]
pattern Œ£‚Çú p d p‚â°p pProd prop =  p , d , p‚â°p , pProd , prop
pattern Œ£‚Çú‚Çå p r d d‚Ä≤ pProd rProd p‚âÖr [t] [u] prop = p , r , d , d‚Ä≤ , p‚âÖr , [t] , [u] , pProd , rProd , prop

pattern U·µ£‚Ä≤ a b c d e f = U·µ£ (U·µ£ a b c d e f)
pattern ne‚Ä≤ a b c d = ne (ne a b c d)
pattern B·µ£‚Ä≤ W a b c d e f g h i j = B·µ£ W (B·µ£ a b c d e f g h i j)
pattern Œ†·µ£‚Ä≤ a b c d e f g h i j = B·µ£‚Ä≤ BŒ†! a b c d e f g h i j
pattern ùï®‚Ä≤ a b c d e f g h i j = B·µ£‚Ä≤ BŒ£! a b c d e f g h i j

mutual

  -- A LogRelKit for the first Universe-level.

  -- kit0 : LogRelKit
  -- kit0 = LogRel.kit 0 (Œª ())

  -- A LogRelKit for the given Universe-level.

  kit : Universe-level ‚Üí LogRelKit
  kit l = LogRel.kit l kit‚Ä≤
  -- kit (lnat n) = LogRel.kit (lnat n) (Œª {_} {_} {_} {[l‚Ä≤]} ‚Üí kit‚Ä≤ {n = n} {[m] = [l‚Ä≤]})
  -- kit lœâ = LogRel.kit lœâ Œª {_} {_} {_} {[l‚Ä≤]} ‚Üí kitœâ {[m] = [l‚Ä≤]}

  -- A LogRelKit for¬†m.

  kit‚Ä≤ : {n m : Universe-level} ‚Üí m <·µò n ‚Üí LogRelKit
  -- kit‚Ä≤ (‚â§·µò-suc·µò (‚â§·µò-ne [l‚Ä≤])) = kit0
  -- kit‚Ä≤ (‚â§·µò-suc·µò ‚â§·µò-zero·µò) = kit0
  -- kit‚Ä≤ (‚â§·µò-suc·µò (‚â§·µò-suc·µò {[l‚Ä≤]} x)) = kit‚Ä≤ {[m] = [l‚Ä≤]} (‚â§·µò-suc·µò x)
  kit‚Ä≤ {m = m} ‚â§‚Ä≤-refl = kit m
  kit‚Ä≤ (‚â§‚Ä≤-step m<n) = kit‚Ä≤ m<n

  -- kit‚Ä≤ {.(1+·µò ‚ü¶ [m] ‚üß·µò)} {[m]} (‚â§·µò-refl .(suc·µò·µ£ _)) = kit ‚ü¶ [m] ‚üß·µò
  -- kit‚Ä≤ {(n)} (‚â§·µò-suc _ m<n) = kit‚Ä≤ m<n

  -- kit‚Ä≤ {(1+ n)} zero·µò-<·µò = kit0
  -- kit‚Ä≤ {(1+ n)} (suc·µò-<·µò {[l]} m<n) = kit‚Ä≤ {n} {[m] = [l]} m<n

  -- kitœâ : ‚àÄ {‚Ñì} {Œì : Con Term ‚Ñì} {m} {[m] : Œì ‚ä©Level m ‚à∑Level} ‚Üí Œì ‚ä© [m] <·µò lœâ ‚Üí LogRelKit
  -- kitœâ <·µò-lœâ = {!   !}

_‚ä©‚Ä≤‚ü®_‚ü©U_ : Con Term ‚Ñì ‚Üí Universe-level ‚Üí Term ‚Ñì ‚Üí Set a
Œì ‚ä©‚Ä≤‚ü® l ‚ü©U A = Œì ‚ä©U A where open LogRelKit (kit l)

_‚ä©‚Ä≤‚ü®_‚ü©B‚ü®_‚ü©_ : Con Term ‚Ñì ‚Üí Universe-level ‚Üí BindingType ‚Üí Term ‚Ñì ‚Üí Set a
Œì ‚ä©‚Ä≤‚ü® l ‚ü©B‚ü® W ‚ü© A = Œì ‚ä©B‚ü® W ‚ü© A where open LogRelKit (kit l)

_‚ä©‚Ä≤‚ü®_‚ü©Id_ : Con Term ‚Ñì ‚Üí Universe-level ‚Üí Term ‚Ñì ‚Üí Set a
Œì ‚ä©‚Ä≤‚ü® l ‚ü©Id A = Œì ‚ä©Id A
  where
  open LogRelKit (kit l)

-- Reducibility of types

_‚ä©‚ü®_‚ü©_ : Con Term ‚Ñì ‚Üí Universe-level ‚Üí Term ‚Ñì ‚Üí Set a
Œì ‚ä©‚ü® l ‚ü© A = Œì ‚ä© A where open LogRelKit (kit l)

-- Equality of reducibile types

_‚ä©‚ü®_‚ü©_‚â°_/_ :
  (Œì : Con Term ‚Ñì) (l : Universe-level) (A _ : Term ‚Ñì) ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí
  Set a
Œì ‚ä©‚ü® l ‚ü© A ‚â° B / [A] = Œì ‚ä© A ‚â° B / [A] where open LogRelKit (kit l)

-- Reducibility of terms

_‚ä©‚ü®_‚ü©_‚à∑_/_ :
  (Œì : Con Term ‚Ñì) (l : Universe-level) (_ A : Term ‚Ñì) ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí
  Set a
Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / [A] = Œì ‚ä© t ‚à∑ A / [A] where open LogRelKit (kit l)

-- Equality of reducibile terms

_‚ä©‚ü®_‚ü©_‚â°_‚à∑_/_ :
  (Œì : Con Term ‚Ñì) (l : Universe-level) (_ _ A : Term ‚Ñì) ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí
  Set a
Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / [A] = Œì ‚ä© t ‚â° u ‚à∑ A / [A] where open LogRelKit (kit l)

------------------------------------------------------------------------
-- Some definitions related to the identity type

-- A view of parts of _‚ä©‚ÇóId_‚à∑_/_.

data ‚ä©Id‚à∑-view
  {A : Term ‚Ñì} (‚ä©A : Œì ‚ä©‚Ä≤‚ü® l ‚ü©Id A) :
  ‚àÄ t ‚Üí Identity t ‚Üí Set a where
  rfl·µ£ : let open _‚ä©‚ÇóId_ ‚ä©A in
         Œì ‚ä©‚ü® l ‚ü© lhs ‚â° rhs ‚à∑ Ty / ‚ä©Ty ‚Üí
         ‚ä©Id‚à∑-view ‚ä©A rfl rfl‚Çô
  ne   : let open _‚ä©‚ÇóId_ ‚ä©A in
         (u-n : Neutral u) ‚Üí
         Œì ‚ä¢ u ~ u ‚à∑ Id Ty lhs rhs ‚Üí
         ‚ä©Id‚à∑-view ‚ä©A u (ne u-n)

-- The view is inhabited for well-formed identity terms.

‚ä©Id‚à∑-view-inhabited :
  ‚àÄ {A} {‚ä©A : Œì ‚ä©‚Ä≤‚ü® l ‚ü©Id A}
  ((u , _ , u-id , _) : Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / Id·µ£ ‚ä©A) ‚Üí
  ‚ä©Id‚à∑-view ‚ä©A u u-id
‚ä©Id‚à∑-view-inhabited = Œª where
  (_ , _ , rfl‚Çô , lhs‚â°rhs) ‚Üí rfl·µ£ lhs‚â°rhs
  (_ , _ , ne u-n , u~u)   ‚Üí ne u-n u~u

-- A view of parts of _‚ä©‚ÇóId_‚â°_‚à∑_/_.

data ‚ä©Id‚â°‚à∑-view
  {Œì : Con Term ‚Ñì} (lhs rhs {Ty} : Term ‚Ñì) (‚ä©Ty : Œì ‚ä©‚ü® l ‚ü© Ty) :
  ‚àÄ t ‚Üí Identity t ‚Üí ‚àÄ u ‚Üí Identity u ‚Üí Set a where
  rfl‚Çå : (lhs‚â°rhs : Œì ‚ä©‚ü® l ‚ü© lhs ‚â° rhs ‚à∑ Ty / ‚ä©Ty) ‚Üí
         ‚ä©Id‚â°‚à∑-view lhs rhs ‚ä©Ty rfl rfl‚Çô rfl rfl‚Çô
  ne   : (t‚Ä≤-n : Neutral t‚Ä≤) (u‚Ä≤-n : Neutral u‚Ä≤) ‚Üí
         Œì ‚ä¢ t‚Ä≤ ~ u‚Ä≤ ‚à∑ Id Ty lhs rhs ‚Üí
         ‚ä©Id‚â°‚à∑-view lhs rhs ‚ä©Ty t‚Ä≤ (ne t‚Ä≤-n) u‚Ä≤ (ne u‚Ä≤-n)

-- The view is inhabited for instances of "well-formed identity term
-- equality".

‚ä©Id‚â°‚à∑-view-inhabited :
  ‚àÄ {A} {Œì : Con Term ‚Ñì}
  (‚ä©A : Œì ‚ä©‚Ä≤‚ü® l ‚ü©Id A) ‚Üí
  let open _‚ä©‚ÇóId_ ‚ä©A in
  ((t‚Ä≤ , u‚Ä≤ , _ , _ , t‚Ä≤-id , u‚Ä≤-id , _) :
   Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / Id·µ£ ‚ä©A) ‚Üí
  ‚ä©Id‚â°‚à∑-view lhs rhs ‚ä©Ty t‚Ä≤ t‚Ä≤-id u‚Ä≤ u‚Ä≤-id
‚ä©Id‚â°‚à∑-view-inhabited _ = Œª where
  (_ , _ , _ , _ , rfl‚Çô , rfl‚Çô , lhs‚â°rhs) ‚Üí
    rfl‚Çå lhs‚â°rhs
  (_ , _ , _ , _ , ne t‚Ä≤-n , ne u‚Ä≤-n , t‚Ä≤~u‚Ä≤) ‚Üí
    ne t‚Ä≤-n u‚Ä≤-n t‚Ä≤~u‚Ä≤
  (_ , _ , _ , _ , rfl‚Çô , ne _ , ())
  (_ , _ , _ , _ , ne _ , rfl‚Çô , ())

-- A kind of constructor for _‚ä©‚ÇóId_‚â°_‚à∑_/_.

‚ä©Id‚â°‚à∑ :
  ‚àÄ {A} {Œì : Con Term ‚Ñì} {‚ä©A : Œì ‚ä©‚Ä≤‚ü® l ‚ü©Id A} ‚Üí
  let open _‚ä©‚ÇóId_ ‚ä©A in
  ((t‚Ä≤ , _ , t‚Ä≤-id , _) : Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / Id·µ£ ‚ä©A)
  ((u‚Ä≤ , _ , u‚Ä≤-id , _) : Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A / Id·µ£ ‚ä©A) ‚Üí
  Identity-rec t‚Ä≤-id
    (Identity-rec u‚Ä≤-id
       (Lift _ ‚ä§)
       (Lift _ ‚ä•))
    (Identity-rec u‚Ä≤-id
       (Lift _ ‚ä•)
       (Œì ‚ä¢ t‚Ä≤ ~ u‚Ä≤ ‚à∑ Id Ty lhs rhs)) ‚Üí
  Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / Id·µ£ ‚ä©A
‚ä©Id‚â°‚à∑ ‚ä©t@(t‚Ä≤ , t‚áí*t‚Ä≤ , t‚Ä≤-id , _) ‚ä©u@(u‚Ä≤ , u‚áí*u‚Ä≤ , u‚Ä≤-id , _) rest =
    t‚Ä≤ , u‚Ä≤ , t‚áí*t‚Ä≤ , u‚áí*u‚Ä≤ , t‚Ä≤-id , u‚Ä≤-id
  , (case ‚ä©Id‚à∑-view-inhabited ‚ä©t of Œª where
       (rfl·µ£ lhs‚â°rhs) ‚Üí case ‚ä©Id‚à∑-view-inhabited ‚ä©u of Œª where
         (rfl·µ£ _) ‚Üí lhs‚â°rhs
         (ne _ _) ‚Üí case rest of Œª ()
       (ne _ _) ‚Üí case ‚ä©Id‚à∑-view-inhabited ‚ä©u of Œª where
         (rfl·µ£ _) ‚Üí case rest of Œª ()
         (ne _ _) ‚Üí rest)

-- A kind of inverse of ‚ä©Id‚â°‚à∑.

‚ä©Id‚â°‚à∑‚Åª¬π :
  ‚àÄ {A} {Œì : Con Term ‚Ñì}
  (‚ä©A : Œì ‚ä©‚Ä≤‚ü® l ‚ü©Id A) ‚Üí
  let open _‚ä©‚ÇóId_ ‚ä©A in
  Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / Id·µ£ ‚ä©A ‚Üí
  ‚àÉ Œª (‚ä©t@(t‚Ä≤ , _ , t‚Ä≤-id , _) : Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / Id·µ£ ‚ä©A) ‚Üí
  ‚àÉ Œª (‚ä©u@(u‚Ä≤ , _ , u‚Ä≤-id , _) : Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A / Id·µ£ ‚ä©A) ‚Üí
  Identity-rec t‚Ä≤-id
    (Identity-rec u‚Ä≤-id
       (Lift _ ‚ä§)
       (Lift _ ‚ä•))
    (Identity-rec u‚Ä≤-id
       (Lift _ ‚ä•)
       (Œì ‚ä¢ t‚Ä≤ ~ u‚Ä≤ ‚à∑ Id Ty lhs rhs))
‚ä©Id‚â°‚à∑‚Åª¬π ‚ä©A t‚â°u@(t‚Ä≤ , u‚Ä≤ , t‚áí*t‚Ä≤ , u‚áí*u‚Ä≤ , t‚Ä≤-id , u‚Ä≤-id , rest) =
  case ‚ä©Id‚â°‚à∑-view-inhabited ‚ä©A t‚â°u of Œª where
    (rfl‚Çå lhs‚â°rhs) ‚Üí
        (t‚Ä≤ , t‚áí*t‚Ä≤ , t‚Ä≤-id , lhs‚â°rhs)
      , (u‚Ä≤ , u‚áí*u‚Ä≤ , u‚Ä≤-id , lhs‚â°rhs)
      , _
    (ne _ _ t‚Ä≤~u‚Ä≤) ‚Üí
        (t‚Ä≤ , t‚áí*t‚Ä≤ , t‚Ä≤-id , ~-trans t‚Ä≤~u‚Ä≤ (~-sym t‚Ä≤~u‚Ä≤))
      , (u‚Ä≤ , u‚áí*u‚Ä≤ , u‚Ä≤-id , ~-trans (~-sym t‚Ä≤~u‚Ä≤) t‚Ä≤~u‚Ä≤)
      , t‚Ä≤~u‚Ä≤
